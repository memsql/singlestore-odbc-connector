# ************************************************************************************
#   Copyright (c) 2021 SingleStore, Inc.
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Library General Public
#   License as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License along with this library; if not see <http://www.gnu.org/licenses>
#   or write to the Free Software Foundation, Inc.,
#   51 Franklin St., Fifth Floor, Boston, MA 02110, USA
# *************************************************************************************/

version: 2.1
parameters:
  driver-version:
    type: string
    default: "1.1.1"

commands:
  setup-environment-linux:
    description: "Setup the linux environment"
    steps:
      - run:
          name: Setup Machine
          command: |
            sudo apt update
            sudo apt install -y curl
            sudo apt-get update
            sudo apt-get install -y mariadb-client-core-10.3
            sudo apt-get install unixodbc odbcinst
            sudo apt-get install unixodbc-dev
            sudo apt-get install --allow-unauthenticated -y --force-yes -m unixodbc-dev odbcinst1debian2 libodbc1
            sudo apt-get install -y libglib2.0 libsecret-1-dev
            sudo apt-get clean
  setup-environment-macos:
    description: "Setup the macos environment"
    steps:
      - run:
          name: Setup Machine
          command: |
            brew update
            brew install openssl@1.1
            brew install curl
            brew install libiodbc
            brew install mysql-client
            brew install cmake
            brew install bind
            brew cleanup

orbs:
  win: circleci/windows@2.4.0

jobs:
  build-windows:
    parameters:
      build_type:
        type: string
      test_dsn:
        type: string
      test_driver:
        type: string
      driver_type:
        type: string
    executor: win/default
    environment:
      BUILD_TYPE: << parameters.build_type >>
      TEST_DRIVER: << parameters.test_driver >>
      TEST_DSN: << parameters.test_dsn >>
      DRIVER_TYPE: << parameters.driver_type >>
    steps:
      - checkout
      - run:
          name: Download CMake
          command: |
            $ProgressPreference = "SilentlyContinue"
            Invoke-WebRequest -URI https://github.com/Kitware/CMake/releases/download/v3.19.0/cmake-3.19.0-win64-x64.zip -OutFile $Env:HOMEPATH\cmake-3.19.0-win64-x64.zip
            Expand-Archive $Env:HOMEPATH\cmake-3.19.0-win64-x64.zip -DestinationPath "$Env:ProgramFiles"
            Rename-Item "$Env:ProgramFiles\cmake-3.19.0-win64-x64" -NewName CMake
            Install-WindowsFeature Net-Framework-Core
      - run:
          name: Download Chrome
          command: |
            .circleci\install-chrome.ps1
      - run:
          name: Start S2MS cluster
          no_output_timeout: 30m
          command: |
            pip install singlestoredb
            python .circleci\setup_s2ms_cluster.py start odbc_test
      - run:
          name: Build project
          command: |
            .circleci\build-windows.ps1
      - run:
          name: Run tests
          command: |
            .circleci\run-tests-windows.ps1
      - run:
          name: Run browser auth tests
          command: |
            cd ./<< parameters.build_type >>
            ../test/<< parameters.build_type >>/odbc_browser_auth
            cd ..
      - run:
          name: Terminate S2MS cluster
          when: always
          command: python ./.circleci/setup_s2ms_cluster.py terminate

  build-macos:
    parameters:
      build_type:
        type: string
      test_dsn:
        type: string
      driver_name:
        type: string
      driver_type:
        type: string
    macos:
      xcode: 11.7.0
    environment:
      BUILD_TYPE: << parameters.build_type >>
      TEST_DSN: << parameters.test_dsn >>
      DRIVER_NAME: << parameters.driver_name >>
      DRIVER_TYPE: << parameters.driver_type >>
      TEST_SCHEMA: odbc_test
      CONTINUOUS_INTEGRATION: true
    steps:
      - checkout
      - run:
          name: Start S2MS cluster
          no_output_timeout: 30m
          command: |
            sudo pip3 install singlestoredb
            python3 ./.circleci/setup_s2ms_cluster.py start odbc_test
      - run:
          name: Define Environment Variables
          command: |
            echo 'export TEST_SERVER=$(echo "$(cat WORKSPACE_ENDPOINT_FILE)")' >> $BASH_ENV
            echo 'export TEST_DRIVER=$DRIVER_NAME' >> $BASH_ENV
            echo 'export TEST_UID=$MEMSQL_USER' >> $BASH_ENV
            echo 'export TEST_PORT=$MEMSQL_PORT' >> $BASH_ENV
            echo 'export TEST_PASSWORD=$MEMSQL_PASSWORD' >> $BASH_ENV
            source $BASH_ENV
      - setup-environment-macos
      - run:
          name: Build project
          command: |
            ./.circleci/build-osx.sh
      - run:
          name: Run tests
          command: |
            ./.circleci/run-tests-osx.sh
      - run:
          name: Run browser auth tests
          command: ./test/odbc_browser_auth
      - run:
          name: Terminate S2MS cluster
          when: always
          command: |
            sudo pip3 install singlestoredb
            python3 ./.circleci/setup_s2ms_cluster.py terminate

  build-ubuntu:
    parameters:
      machine_class:
        type: string
      test_dsn:
        type: string
      test_driver:
        type: string
      memsql_image:
        type: string
      build_type:
        type: string
      with_sanitizer:
        type: boolean
        default: false
    machine:
      image: ubuntu-2004:202010-01
    resource_class: << parameters.machine_class >>
    environment:
      WITH_SANITIZER: << parameters.with_sanitizer >>
      BUILD_TYPE: << parameters.build_type >>
      MEMSQL_IMAGE: << parameters.memsql_image >>
      TEST_DRIVER: << parameters.test_driver >>
      TEST_DSN: << parameters.test_dsn >>
      TEST_SERVER: singlestore.test.com
      TEST_SCHEMA: odbc_test
      TEST_UID: root
      CONTINUOUS_INTEGRATION: true
    steps:
      - setup-environment-linux
      - checkout
      - run:
          name: Setup test cluster
          command: ./.circleci/setup-cluster.sh
      - run:
          name: Build project
          command: ./.circleci/build-ubuntu.sh
      - run:
          name: Run tests
          command: ./.circleci/run-tests-linux.sh
      - run:
          name: Run browser auth tests
          command: ./test/odbc_browser_auth

  build-linux-in-docker:
    #    We need docker based jobs because CircleCI has only ubuntu Linux executor and we need to test our connector on Debian and CentOS too
    #    This job use a `$MEMSQL_HOST` variable which point to `mac-ansi` host. Because of that we can't run this job and `macos-ansi` job simultaneously
    parameters:
      os_version:
        type: string
      build_type:
        type: string
      test_dsn:
        type: string
      test_driver:
        type: string
      with_sanitizer:
        type: boolean
        default: false
    docker:
      - image: << parameters.os_version >>
    environment:
      WITH_SANITIZER: << parameters.with_sanitizer >>
      IMAGE_NAME: << parameters.os_version >>
      BUILD_TYPE: << parameters.build_type >>
      TEST_DRIVER: << parameters.test_driver >>
      TEST_DSN: << parameters.test_dsn >>
      TEST_SCHEMA: odbc_test
      CONTINUOUS_INTEGRATION: true
      TERM: xterm-256color
    steps:
      - checkout
      - run:
          name: Setup Environment
          command: ./.circleci/setup-environment-docker.sh
      - run:
          name: Start S2MS cluster
          no_output_timeout: 30m
          command: |
            pip3 install singlestoredb
            python3 ./.circleci/setup_s2ms_cluster.py start odbc_test
      - run:
          name: Define Environment Variables
          command: |
            echo 'export TEST_SERVER=$(echo "$(cat WORKSPACE_ENDPOINT_FILE)")' >> $BASH_ENV
            echo 'export TEST_UID=$MEMSQL_USER' >> $BASH_ENV
            echo 'export TEST_PORT=$MEMSQL_PORT' >> $BASH_ENV
            echo 'export TEST_PASSWORD=$MEMSQL_PASSWORD' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Build project
          command: ./.circleci/build-linux-in-docker.sh
      - run:
          name: Run tests
          command: ./.circleci/run-tests-linux.sh
      - run:
          name: Run browser auth tests
          command: ./test/odbc_browser_auth
      - run:
          name: Terminate S2MS cluster
          when: always
          command: python3 ./.circleci/setup_s2ms_cluster.py terminate


  publish-windows:
    parameters:
      build_type:
        type: string
    executor: win/default
    environment:
      BUILD_TYPE: << parameters.build_type >>
    steps:
      - checkout
      - run:
          name: Download CMake
          command: |
            $ProgressPreference = "SilentlyContinue"
            Invoke-WebRequest -URI https://github.com/Kitware/CMake/releases/download/v3.19.0/cmake-3.19.0-win64-x64.zip -OutFile $Env:HOMEPATH\cmake-3.19.0-win64-x64.zip
            Expand-Archive $Env:HOMEPATH\cmake-3.19.0-win64-x64.zip -DestinationPath "$Env:ProgramFiles"
            Rename-Item "$Env:ProgramFiles\cmake-3.19.0-win64-x64" -NewName CMake
            Install-WindowsFeature Net-Framework-Core
      - run:
          name: Build project
          command: |
            .circleci\build-windows.ps1
      - store_artifacts:
          path: C:\Users\circleci\project\wininstall\singlestore-connector-odbc-<< pipeline.parameters.driver-version >>-win64.msi

  publish-macos:
    parameters:
      build_type:
        type: string
    macos:
      xcode: 11.7.0
    environment:
      BUILD_TYPE: << parameters.build_type >>
      CONTINUOUS_INTEGRATION: true
    steps:
      - setup-environment-macos
      - checkout
      - run:
          name: Build project
          command: |
            ./.circleci/build-osx.sh
      - store_artifacts:
          path: /Users/distiller/project/osxinstall/singlestore-connector-odbc-<< pipeline.parameters.driver-version >>-osx-x86_64.pkg

  publish-linux:
    parameters:
      os_version:
        type: string
      os_name:
        type: string
      build_type:
        type: string
    docker:
      - image: << parameters.os_version >>
    environment:
      IMAGE_NAME: << parameters.os_version >>
      BUILD_TYPE: << parameters.build_type >>
      CONTINUOUS_INTEGRATION: true
    steps:
      - checkout
      - run:
          name: Setup Environment
          command: ./.circleci/setup-environment-docker.sh
      - run:
          name: Build project
          command: ./.circleci/build-linux-in-docker.sh
      - run:
          name: Create archive
          command: |
            cd /root/project
            mkdir singlestore-connector-odbc-<< pipeline.parameters.driver-version >>-<< parameters.os_name >>-amd64
            cp linuxinstall/README.md singlestore-connector-odbc-<< pipeline.parameters.driver-version >>-<< parameters.os_name >>-amd64
            cp libssodbca.so singlestore-connector-odbc-<< pipeline.parameters.driver-version >>-<< parameters.os_name >>-amd64
            cp libssodbcw.so singlestore-connector-odbc-<< pipeline.parameters.driver-version >>-<< parameters.os_name >>-amd64
            tar -zcvf singlestore-connector-odbc-<< pipeline.parameters.driver-version >>-<< parameters.os_name >>-amd64.tar.gz singlestore-connector-odbc-<< pipeline.parameters.driver-version >>-<< parameters.os_name >>-amd64
      - store_artifacts:
          path: /root/project/singlestore-connector-odbc-<< pipeline.parameters.driver-version >>-<< parameters.os_name >>-amd64.tar.gz

  build-only-linux:
    parameters:
      os_version:
        type: string
      os_name:
        type: string
      build_type:
        type: string
    docker:
      - image: << parameters.os_version >>
    environment:
      IMAGE_NAME: << parameters.os_version >>
      BUILD_TYPE: << parameters.build_type >>
      CONTINUOUS_INTEGRATION: true
    steps:
      - checkout
      - run:
          name: Setup Environment
          command: ./.circleci/setup-environment-docker.sh
      - run:
          name: Build project
          command: ./.circleci/build-linux-in-docker.sh

workflows:
  test:
    jobs:
      - build-ubuntu:
          name: build-ubuntu-sanitizer-unicode-7.6.5-<< matrix.build_type >>
          matrix:
            parameters:
              machine_class:
                - large
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC Unicode Driver
              memsql_image:
                - memsql/cluster-in-a-box:centos-7.6.5-018454f4e3-4.0.1-1.13.0
              with_sanitizer:
                - true
      - build-ubuntu:
          name: build-ubuntu-unicode-7.6.5-<< matrix.build_type >>
          matrix:
            parameters:
              machine_class:
                - large
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC Unicode Driver
              memsql_image:
                - memsql/cluster-in-a-box:centos-7.6.5-018454f4e3-4.0.1-1.13.0
      - build-ubuntu:
          name: build-ubuntu-ansi-7.6.5-<< matrix.build_type >>
          matrix:
            parameters:
              machine_class:
                - large
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC ANSI Driver
              memsql_image:
                - memsql/cluster-in-a-box:centos-7.6.5-018454f4e3-4.0.1-1.13.0
      - build-macos:
          name: build-macos-ansi-<< matrix.build_type >>
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              driver_name:
                - SingleStore ODBC ANSI Driver
              driver_type:
                - ansi
      - build-windows:
          name: build-windows-unicode-<< matrix.build_type >>
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC Unicode Driver
              driver_type:
                - unicode
      - build-macos:
          name: build-macos-unicode-<< matrix.build_type >>
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              driver_name:
                - SingleStore ODBC Unicode Driver
              driver_type:
                - unicode
      - build-windows:
          name: build-windows-ansi-<< matrix.build_type >>
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC ANSI Driver
              driver_type:
                - ansi
  test-build-linux:
    jobs:
      - build-only-linux:
          matrix:
            parameters:
              os_version:
                - centos:centos7
              os_name:
                - centos7
              build_type:
                - RelWithDebInfo
      - build-only-linux:
          matrix:
            parameters:
              os_version:
                - centos:centos8
              os_name:
                - centos8
              build_type:
                - RelWithDebInfo
      - build-only-linux:
          matrix:
            parameters:
              os_version:
                - debian:9
              os_name:
                - debian9
              build_type:
                - RelWithDebInfo
      - build-only-linux:
          matrix:
            parameters:
              os_version:
                - debian:10
              os_name:
                - debian10
              build_type:
                - RelWithDebInfo
  weekly:
    triggers:
      - schedule:
          cron: "0 0 * * 1"
          filters:
            branches:
              only:
                - master
    jobs:
      - build-ubuntu:
          name: build-ubuntu-sanitizer-unicode-7.6.5-<< matrix.build_type >>
          matrix:
            parameters:
              machine_class:
                - large
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC Unicode Driver
              memsql_image:
                - memsql/cluster-in-a-box:centos-7.6.5-018454f4e3-4.0.1-1.13.0
              with_sanitizer:
                - true
      - build-ubuntu:
          name: build-ubuntu-unicode-7.6.5-<< matrix.build_type >>
          matrix:
            parameters:
              machine_class:
                - large
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC Unicode Driver
              memsql_image:
                - memsql/cluster-in-a-box:centos-7.6.5-018454f4e3-4.0.1-1.13.0
      - build-ubuntu:
          name: build-ubuntu-ansi-7.6.5-<< matrix.build_type >>
          matrix:
            parameters:
              machine_class:
                - large
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC ANSI Driver
              memsql_image:
                - memsql/cluster-in-a-box:centos-7.6.5-018454f4e3-4.0.1-1.13.0
      - build-ubuntu:
          name: build-ubuntu-sanitizer-unicode-7.5.6-<< matrix.build_type >>
          matrix:
            parameters:
              machine_class:
                - large
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC Unicode Driver
              memsql_image:
                - memsql/cluster-in-a-box:centos-7.5.6-9e799dbf4f-3.2.11-1.11.10
      - build-ubuntu:
          name: build-ubuntu-unicode-7.3.2-<< matrix.build_type >>
          matrix:
            parameters:
              machine_class:
                - large
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC Unicode Driver
              memsql_image:
                - memsql/cluster-in-a-box:centos-7.3.2-a364d4b31f-3.0.0-1.9.3
      - build-ubuntu:
          name: build-ubuntu-ansi-7.5.6-<< matrix.build_type >>
          matrix:
            parameters:
              machine_class:
                - large
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC ANSI Driver
              memsql_image:
                - memsql/cluster-in-a-box:centos-7.5.6-9e799dbf4f-3.2.11-1.11.10
      - build-ubuntu:
          name: build-ubuntu-ansi-7.3.2-<< matrix.build_type >>
          matrix:
            parameters:
              machine_class:
                - large
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC ANSI Driver
              memsql_image:
                - memsql/cluster-in-a-box:centos-7.3.2-a364d4b31f-3.0.0-1.9.3
      - build-linux-in-docker:
          name: build-debian-9-unicode-<< matrix.build_type >>
          matrix:
            parameters:
              os_version:
                - debian:9
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC Unicode Driver
      - build-linux-in-docker:
          name: build-debian-9-ansi-<< matrix.build_type >>
          matrix:
            parameters:
              os_version:
                - debian:9
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC ANSI Driver
      - build-linux-in-docker:
          name: build-debian-10-unicode-<< matrix.build_type >>
          matrix:
            parameters:
              os_version:
                - debian:10
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC Unicode Driver
      - build-linux-in-docker:
          name: build-debian-10-ansi-<< matrix.build_type >>
          matrix:
            parameters:
              os_version:
                - debian:10
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC ANSI Driver
      - build-linux-in-docker:
          name: build-centos-7-unicode-<< matrix.build_type >>
          matrix:
            parameters:
              os_version:
                - centos:centos7
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC Unicode Driver
      - build-linux-in-docker:
          name: build-centos-7-ansi-<< matrix.build_type >>
          matrix:
            parameters:
              os_version:
                - centos:centos7
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC ANSI Driver
      - build-linux-in-docker:
          name: build-centos-8-unicode-<< matrix.build_type >>
          matrix:
            parameters:
              os_version:
                - centos:centos8
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC Unicode Driver
      - build-linux-in-docker:
          name: build-centos-8-ansi-<< matrix.build_type >>
          matrix:
            parameters:
              os_version:
                - centos:centos8
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC ANSI Driver
      - build-macos:
          name: build-macos-unicode-<< matrix.build_type >>
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              driver_name:
                - SingleStore ODBC Unicode Driver
              driver_type:
                - unicode
      - build-macos:
          name: build-macos-ansi-<< matrix.build_type >>
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              driver_name:
                - SingleStore ODBC ANSI Driver
              driver_type:
                - ansi
      - build-windows:
          name: build-windows-unicode-<< matrix.build_type >>
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC Unicode Driver
              driver_type:
                - unicode
      - build-windows:
          name: build-windows-ansi-<< matrix.build_type >>
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC ANSI Driver
              driver_type:
                - ansi
  publish:
    jobs:
      - publish-windows:
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-macos:
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-linux:
          matrix:
            parameters:
              os_version:
                - centos:centos7
              os_name:
                - centos7
              build_type:
                - RelWithDebInfo
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-linux:
          matrix:
            parameters:
              os_version:
                - centos:centos8
              os_name:
                - centos8
              build_type:
                - RelWithDebInfo
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-linux:
          matrix:
            parameters:
              os_version:
                - debian:9
              os_name:
                - debian9
              build_type:
                - RelWithDebInfo
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-linux:
          matrix:
            parameters:
              os_version:
                - debian:10
              os_name:
                - debian10
              build_type:
                - RelWithDebInfo
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
